import requests
import json
import getpass

def get_firewall_info():
    """Prompts the user to enter the firewall IP address, username, and password."""
    fw_ip = input("Enter the firewall IP address: ")
    fw_user = input("Enter the firewall username: ")
    fw_pass = getpass.getpass("Enter the firewall password: ")
    return fw_ip, fw_user, fw_pass

def get_api_key(fw_ip, fw_user, fw_pass):
    # Set up the request parameters and login to the firewall
    login_url = 'https://{}/api/?type=keygen&user={}&password={}'.format(fw_ip, fw_user, fw_pass)
    response = requests.get(login_url, verify=False)

    # Extract the API key from the response
    xml_response = response.text
    api_key_start = xml_response.find('<key>') + 5
    api_key_end = xml_response.find('</key>')
    api_key = xml_response[api_key_start:api_key_end]

    # Return the API key
    return api_key

def get_object_only(api_key, fw_ip):
    
    objects_data = []
    
    url = f"https://{fw_ip}/restapi/v10.0/Objects/Addresses?location=vsys&vsys=vsys1"

    payload={}
    headers = {
      'Accept': 'application/json',
      'X-PAN-KEY': api_key,
    }

    response = requests.request("GET", url, headers=headers, data=payload, verify=False)

    sort = response.json()
    
    sort_list = sort['result']['entry']

    # sort_total = sort['result']['@total-count']

    # sort_list = sort['result']['entry']
    # print(sort_list)
    
    for item in sort_list:
      try:
        # objects_data.append(item.get('ip-netmask', 'Nill'))
        objects_data.append(item.get('@name', 'Nill'))
      except:
        continue

    return objects_data

def create_address_object(api_key,fw_ip,location, vsys, name, ip_range, desc):
    url = f"https://{fw_ip}/restapi/v10.0/Objects/Addresses?location={location}&vsys={vsys}&name={name}"
    
    payload = json.dumps({
        "entry": [
        {
          "@name": name,
          "@location": location,
          "@vsys": vsys,
          "ip-netmask": ip_range,
          "description": desc
            }
        ]
        })
    headers = {
      'X-PAN-KEY': api_key,
      'Content-Type': 'application/json',
    }
    response = requests.request("POST", url, headers=headers, data=payload, verify=False)
    return response.text
  
def get_sec_rules(fw_ip, api_key):
    url = f"https://{fw_ip}/restapi/v10.0/Policies/SecurityRules?location=vsys&vsys=vsys1"
    payload={}
    headers = {
      'Accept': 'application/json',
      'X-PAN-KEY': api_key,
    }
    response = requests.request("GET", url, headers=headers, data=payload, verify=False)
    sort = response.json()
    sort_total = sort['result']['@total-count']
    sort_list = sort['result']['entry']
    objects_data = []
    for item in sort_list:
        src_obj_list = item['source'].get('member', 'Nill')
        dst_obj_list = item['destination'].get('member', 'Nill')
        for src_obj in src_obj_list:
            if src_obj == 'any':
                print('Rule has general Object')
            else:
                objects_data.append(src_obj)
        for dst_obj in dst_obj_list:
            if dst_obj == 'any':
                print('Rule has general Object')
            else:
                objects_data.append(dst_obj)
    return objects_data

def compare_lists(list1, list2):
    """Compares two lists and returns the matching and non-matching values."""
    matching = set(list1) & set(list2)
    non_matching = set(list1) ^ set(list2)
    return list(matching), list(non_matching)


def get_object_details(api_key, fw_ip):
    
    objects_data = []
    
    url = f"https://{fw_ip}/restapi/v10.0/Objects/Addresses?location=vsys&vsys=vsys1"

    payload={}
    headers = {
      'Accept': 'application/json',
      'X-PAN-KEY': api_key,
    }

    response = requests.request("GET", url, headers=headers, data=payload, verify=False)

    sort = response.json()
    
    sort_list = sort['result']['entry']

    # sort_total = sort['result']['@total-count']

    # sort_list = sort['result']['entry']
    # print(sort_list)
    
    for item in sort_list:
      try:
        netmask = item.get('ip-netmask', 'Nill')
        name = item.get('@name', 'Nill')
        objects_data.append({'Name': name, 'Details': netmask})
      except:
        continue

    return objects_data
